// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/submaline/user-service/gen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	LoginWithEmail(context.Context, *connect_go.Request[v1.LoginWithEmailRequest]) (*connect_go.Response[v1.LoginWithEmailResponse], error)
	UpdatePassword(context.Context, *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error)
	TokenRefresh(context.Context, *connect_go.Request[v1.TokenRefreshRequest]) (*connect_go.Response[v1.TokenRefreshResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		loginWithEmail: connect_go.NewClient[v1.LoginWithEmailRequest, v1.LoginWithEmailResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/LoginWithEmail",
			opts...,
		),
		updatePassword: connect_go.NewClient[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/UpdatePassword",
			opts...,
		),
		tokenRefresh: connect_go.NewClient[v1.TokenRefreshRequest, v1.TokenRefreshResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/TokenRefresh",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	loginWithEmail *connect_go.Client[v1.LoginWithEmailRequest, v1.LoginWithEmailResponse]
	updatePassword *connect_go.Client[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse]
	tokenRefresh   *connect_go.Client[v1.TokenRefreshRequest, v1.TokenRefreshResponse]
}

// LoginWithEmail calls auth.v1.AuthService.LoginWithEmail.
func (c *authServiceClient) LoginWithEmail(ctx context.Context, req *connect_go.Request[v1.LoginWithEmailRequest]) (*connect_go.Response[v1.LoginWithEmailResponse], error) {
	return c.loginWithEmail.CallUnary(ctx, req)
}

// UpdatePassword calls auth.v1.AuthService.UpdatePassword.
func (c *authServiceClient) UpdatePassword(ctx context.Context, req *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error) {
	return c.updatePassword.CallUnary(ctx, req)
}

// TokenRefresh calls auth.v1.AuthService.TokenRefresh.
func (c *authServiceClient) TokenRefresh(ctx context.Context, req *connect_go.Request[v1.TokenRefreshRequest]) (*connect_go.Response[v1.TokenRefreshResponse], error) {
	return c.tokenRefresh.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	LoginWithEmail(context.Context, *connect_go.Request[v1.LoginWithEmailRequest]) (*connect_go.Response[v1.LoginWithEmailResponse], error)
	UpdatePassword(context.Context, *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error)
	TokenRefresh(context.Context, *connect_go.Request[v1.TokenRefreshRequest]) (*connect_go.Response[v1.TokenRefreshResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/auth.v1.AuthService/LoginWithEmail", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/LoginWithEmail",
		svc.LoginWithEmail,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/UpdatePassword", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/UpdatePassword",
		svc.UpdatePassword,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/TokenRefresh", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/TokenRefresh",
		svc.TokenRefresh,
		opts...,
	))
	return "/auth.v1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) LoginWithEmail(context.Context, *connect_go.Request[v1.LoginWithEmailRequest]) (*connect_go.Response[v1.LoginWithEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.LoginWithEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdatePassword(context.Context, *connect_go.Request[v1.UpdatePasswordRequest]) (*connect_go.Response[v1.UpdatePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.UpdatePassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) TokenRefresh(context.Context, *connect_go.Request[v1.TokenRefreshRequest]) (*connect_go.Response[v1.TokenRefreshResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.TokenRefresh is not implemented"))
}
